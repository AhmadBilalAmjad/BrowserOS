From 12e202633ff1e358ef6e35fc7d1782b61f5d35a7 Mon Sep 17 00:00:00 2001
From: Nikhil Sonti <nikhilsv92@gmail.com>
Date: Sun, 18 May 2025 18:52:02 +0100
Subject: [PATCH] first run

---
 chrome/browser/chrome_browser_main.cc         |   1 +
 .../browser/ui/webui/chrome_web_ui_configs.cc |   2 +
 chrome/browser/ui/webui/nxtscape_first_run.h  | 175 ++++++++++++++++++
 chrome/common/webui_url_constants.cc          |   1 +
 4 files changed, 179 insertions(+)
 create mode 100644 chrome/browser/ui/webui/nxtscape_first_run.h

diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index 61da14e26c4db..89d070607e1d4 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -1013,6 +1013,7 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   if (first_run::IsChromeFirstRun()) {
     if (!base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kApp) &&
         !base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kAppId)) {
+      browser_creator_->AddFirstRunTabs({GURL("chrome://nxtscape-first-run")});
       browser_creator_->AddFirstRunTabs(master_prefs_->new_tabs);
     }
 
diff --git a/chrome/browser/ui/webui/chrome_web_ui_configs.cc b/chrome/browser/ui/webui/chrome_web_ui_configs.cc
index dd1c0af6d55ca..6ab718e19e375 100644
--- a/chrome/browser/ui/webui/chrome_web_ui_configs.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_configs.cc
@@ -43,6 +43,7 @@
 #include "chrome/browser/ui/webui/signin_internals_ui.h"
 #include "chrome/browser/ui/webui/sync_internals/sync_internals_ui.h"
 #include "chrome/browser/ui/webui/translate_internals/translate_internals_ui.h"
+#include "chrome/browser/ui/webui/nxtscape_first_run.h"
 #include "chrome/browser/ui/webui/usb_internals/usb_internals_ui.h"
 #include "chrome/browser/ui/webui/user_actions/user_actions_ui.h"
 #include "chrome/browser/ui/webui/version/version_ui.h"
@@ -248,6 +249,7 @@ void RegisterChromeWebUIConfigs() {
   map.AddWebUIConfig(std::make_unique<SiteEngagementUIConfig>());
   map.AddWebUIConfig(std::make_unique<SyncInternalsUIConfig>());
   map.AddWebUIConfig(std::make_unique<TranslateInternalsUIConfig>());
+  map.AddWebUIConfig(std::make_unique<NxtscapeFirstRunUIConfig>());
   map.AddWebUIConfig(std::make_unique<UsbInternalsUIConfig>());
   map.AddWebUIConfig(std::make_unique<UserActionsUIConfig>());
   map.AddWebUIConfig(std::make_unique<VersionUIConfig>());
diff --git a/chrome/browser/ui/webui/nxtscape_first_run.h b/chrome/browser/ui/webui/nxtscape_first_run.h
new file mode 100644
index 0000000000000..6a637a2a417c9
--- /dev/null
+++ b/chrome/browser/ui/webui/nxtscape_first_run.h
@@ -0,0 +1,175 @@
+#ifndef CHROME_BROWSER_UI_WEBUI_NXTSCAPE_FIRST_RUN_H_
+#define CHROME_BROWSER_UI_WEBUI_NXTSCAPE_FIRST_RUN_H_
+
+#include "base/memory/ref_counted_memory.h"
+#include "chrome/browser/profiles/profile.h"
+#include "content/public/browser/url_data_source.h"
+#include "content/public/browser/web_ui.h"
+#include "content/public/browser/web_ui_controller.h"
+#include "content/public/browser/webui_config.h"
+#include "services/network/public/mojom/content_security_policy.mojom.h"
+
+class UFRDataSource : public content::URLDataSource {
+ public:
+  UFRDataSource() {}
+  UFRDataSource(const UFRDataSource&) = delete;
+  UFRDataSource& operator=(const UFRDataSource&) = delete;
+  
+  // URLDataSource implementation:
+  std::string GetSource() override;
+  std::string GetMimeType(const GURL& url) override;
+  std::string GetContentSecurityPolicy(network::mojom::CSPDirectiveName directive) override;
+  void StartDataRequest(const GURL& url,
+                        const content::WebContents::Getter& wc_getter,
+                        GotDataCallback callback) override;
+};
+
+// Implementation of UFRDataSource
+std::string UFRDataSource::GetSource() {
+  return "nxtscape-first-run";
+}
+
+std::string UFRDataSource::GetMimeType(const GURL& url) {
+  return "text/html";
+}
+
+std::string UFRDataSource::GetContentSecurityPolicy(network::mojom::CSPDirectiveName directive) {
+  if (directive == network::mojom::CSPDirectiveName::ScriptSrc)
+    return "script-src 'unsafe-inline'";
+  return std::string();
+}
+
+void UFRDataSource::StartDataRequest(const GURL& url,
+                                    const content::WebContents::Getter& wc_getter,
+                                    GotDataCallback callback) {
+  std::string source = R"(
+<title>Nxtscape First Run üöÄ</title>
+<meta charset="UTF-8">
+<meta name="color-scheme" content="light dark">
+<style>
+ @import url(chrome://resources/css/text_defaults_md.css);
+ html{color:#202124; background:white; line-height:1.2em; font-family: sans-serif; font-size: 1.3em;}
+ a{color:#1967d2; text-decoration: none;}
+ a:hover{text-decoration: underline;}
+ h2{margin:0; padding:0.8em 1.33em; font-size: 1.5em;}
+ p,details{border-top:.063em solid #f0f0f0; margin:0; padding:1.2em 2em;}
+ ul,ol{padding-left:2.5em; margin-top: 0.5em; margin-bottom: 0.5em;}
+ code{background:rgba(128 128 128 / .2); padding:0.2em 0.5em; border-radius:0.25em; font-size: 0.9em;}
+ summary{cursor:pointer; font-weight: bold; padding: 0.5em 0;}
+ section{width:60em; max-width: 90%; margin:3em auto; border-radius:.75em;
+         background:white; box-shadow:0 .1em .2em 0 rgba(0,0,0,0.1), 0 .2em .5em 0 rgba(0,0,0,0.1);}
+ .hero {text-align: center; padding-bottom: 1em;}
+ .hero h1 {font-size: 2.5em; margin-bottom: 0.2em; color: #333;}
+ .hero p {font-size: 1.1em; color: #555; border-top: none; padding-top: 0;}
+ .section-title { font-size: 1.8em; margin-bottom: 0.5em; color: #444;}
+ .feature-list li { margin-bottom: 0.5em; }
+ .community-links a { display: inline-block; margin: 0.5em; padding: 0.5em 1em; background-color: #f0f0f0; border-radius: 0.3em; color: #333; }
+ .community-links a:hover { background-color: #e0e0e0; }
+
+ @media(prefers-color-scheme:dark){
+  html{color:#e8eaed; background:#202124}
+  a{color:#8ab4f8}
+  p,details{border-top:.063em solid #3f4042}
+  section{background:#292a2d; box-shadow:0 .1em .2em 0 rgba(0,0,0,0.3), 0 .2em .5em 0 rgba(0,0,0,0.3);}
+  .hero h1 {color: #f1f1f1;}
+  .hero p {color: #ccc;}
+  .section-title { color: #ddd;}
+  .community-links a { background-color: #3a3b3d; color: #e8eaed; }
+  .community-links a:hover { background-color: #4a4b4d; }
+ }
+</style>
+<base target="_blank">
+
+<section class="hero">
+ <h1>The Open-Source Agentic Browser ü¶ä</h1>
+ <p class="sub-headline">Your Browser, Reimagined. ‚ú®</p>
+ <p>We believe browsers must be open source, not owned by search or ad companies. And the future is AI agents automating your work locally and securely. We're building the best browser for that future. üöÄ</p>
+ <p style="font-size:0.9em; color: #777;">This page can always be accessed again at <a href="chrome://nxtscape-first-run"><code>chrome://nxtscape-first-run</code></a></p>
+</section>
+
+<section>
+ <h2 class="section-title">üåü Key Features üåü</h2>
+ <ul class="feature-list">
+  <li>ü§ñ <strong>AI Agents:</strong> Delegate repetitive tasks and information gathering to local agents that work for you.</li>
+  <li>üß† <strong>AI Chat & Insights:</strong> Quickly summarize multiple tabs or dense documents with powerful AI assistance.</li>
+  <li>üîí <strong>Enhanced Privacy Controls:</strong> Take charge of your data with advanced tracking protection and privacy settings.</li>
+  <li>üß© <strong>Seamless Extension Support:</strong> Easily install your favorite extensions!</li>
+ </ul>
+</section>
+
+<section>
+ <h2 class="section-title">ü§ù Join Our Community & Explore ü§ù</h2>
+ <p class="community-links">
+  <a href="https://discord.gg/Z33rpYme">üí¨ Discord</a>
+  <a href="https://github.com/nxtscape/nxtscape">üíª GitHub</a>
+  <a href="https://x.com/nxtscape">üê¶ X (Twitter)</a>
+ </p>
+ <p style="font-size:0.9em; text-align:center;">Have questions or want to contribute? We'd love to hear from you!</p>
+</section>
+
+<section>
+ <h2>üõ†Ô∏è How-To Guides üõ†Ô∏è</h2>
+ <details open>
+  <summary><b>üì• Importing Your Data from Chrome</b></summary>
+  <p>Easily bring your settings over from Chrome!</p>
+  <ol>
+   <li>Open Nxtscape settings by navigating to <a href="chrome://settings/importData"><code>chrome://settings/importData</code></a>.</li>
+   <li>You can import:
+    <ul>
+     <li>üìñ Bookmarks</li>
+     <li>üìú History</li>
+     <li>üß© Extensions</li>
+     <li>‚ûï And more!</li>
+    </ul>
+   </li>
+   <li>Follow the on-screen prompts to complete the import.</li>
+  </ol>
+ </details>
+ <p>
+  <a href="https://github.com/nxtscape/nxtscape">Check out the FAQ on the GitHub</a>
+  for information on other common topics.
+</section>
+
+<section>
+ <h2>‚ú® Extra Nxtscape Features ‚ú®</h2>
+ <p>Many unique features introduced by Nxtscape may be disabled by default. These can be enabled in
+  <a href="chrome://flags"><code>chrome://flags</code></a> or as command-line switches. Take a look at
+  <a href="https://github.com/nxtscape/nxtscape">the Nxtscape flags documentation</a> to see what features you may find useful to enable.</p>
+</section>
+
+<section>
+ <h2>üîó Additional Links üîó</h2>
+ <p>‚≠êÔ∏è <strong>Support & influence the roadmap:</strong> <a href="https://github.com/nxtscape/nxtscape">Star Nxtscape on GitHub</a>.</p>
+ <p>üìù <strong>Have an idea?</strong> Add or vote for suggestions on our <a href="https://nxtscape.feedbear.com/roadmap">public roadmap</a>.</p>
+ <p>üí¨ <strong>Join the conversation:</strong> <a href="https://discord.gg/Z33rpYme">Join our Discord</a> for updates and discussion.</p>
+</section>
+<script>
+ document.getElementById("bdic").onchange = function(e){
+  var f = new FileReader;
+  f.onload = function(){
+   var a = document.createElement("a");
+   a.setAttribute("href", "data:application/octet-stream;base64, " + f.result);
+   a.setAttribute("download", e.target.files[0].name.replace(/\.[^/.]+$/, ".bdic"));
+   a.click()
+  }, f.readAsText(this.files[0])};
+</script>
+)";
+  std::move(callback).Run(base::MakeRefCounted<base::RefCountedString>(std::move(source)));
+}
+
+class NxtscapeFirstRun;
+class NxtscapeFirstRunUIConfig : public content::DefaultWebUIConfig<NxtscapeFirstRun> {
+  public:
+   NxtscapeFirstRunUIConfig() : DefaultWebUIConfig("chrome", "nxtscape-first-run") {}
+};
+
+class NxtscapeFirstRun : public content::WebUIController {
+ public:
+  NxtscapeFirstRun(content::WebUI* web_ui) : content::WebUIController(web_ui) {
+    content::URLDataSource::Add(Profile::FromWebUI(web_ui), std::make_unique<UFRDataSource>());
+  }
+  NxtscapeFirstRun(const NxtscapeFirstRun&) = delete;
+  NxtscapeFirstRun& operator=(const NxtscapeFirstRun&) = delete;
+};
+
+#endif  // CHROME_BROWSER_UI_WEBUI_NXTSCAPE_FIRST_RUN_H_
diff --git a/chrome/common/webui_url_constants.cc b/chrome/common/webui_url_constants.cc
index d94ad4f02b11d..9105c0f343ef5 100644
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -71,6 +71,7 @@ bool IsSystemWebUIHost(std::string_view host) {
 // These hosts will also be suggested by BuiltinProvider.
 base::span<const base::cstring_view> ChromeURLHosts() {
   static constexpr auto kChromeURLHosts = std::to_array<base::cstring_view>({
+      "nxtscape-first-run",
       kChromeUIAboutHost,
       kChromeUIAccessibilityHost,
 #if !BUILDFLAG(IS_ANDROID)
-- 
2.49.0

