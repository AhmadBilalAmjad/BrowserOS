From 32712f2b396a6bb5341a1a4dbbd4079ea0c5d90b Mon Sep 17 00:00:00 2001
From: Nikhil Sonti <nikhilsv92@gmail.com>
Date: Mon, 16 Jun 2025 14:14:40 -0700
Subject: [PATCH] Nxtscape sparkler updater

---
 chrome/BUILD.gn                               |   5 +
 chrome/browser/BUILD.gn                       |  20 +
 .../mac/chrome_browser_main_extra_parts_mac.h |   1 +
 .../chrome_browser_main_extra_parts_mac.mm    |  19 +
 chrome/browser/mac/sparkle_glue.h             |  51 +++
 chrome/browser/mac/sparkle_glue.mm            | 409 ++++++++++++++++++
 chrome/browser/mac/su_updater.h               |  38 ++
 chrome/browser/sparkle_buildflags.gni         |  21 +
 chrome/browser/ui/BUILD.gn                    |   3 +
 .../webui/help/sparkle_version_updater_mac.h  |  55 +++
 .../webui/help/sparkle_version_updater_mac.mm |  87 ++++
 .../ui/webui/help/version_updater_mac.mm      |  27 +-
 third_party/sparkle/BUILD.gn                  |  50 +++
 13 files changed, 785 insertions(+), 1 deletion(-)
 create mode 100644 chrome/browser/mac/sparkle_glue.h
 create mode 100644 chrome/browser/mac/sparkle_glue.mm
 create mode 100644 chrome/browser/mac/su_updater.h
 create mode 100644 chrome/browser/sparkle_buildflags.gni
 create mode 100644 chrome/browser/ui/webui/help/sparkle_version_updater_mac.h
 create mode 100644 chrome/browser/ui/webui/help/sparkle_version_updater_mac.mm
 create mode 100644 third_party/sparkle/BUILD.gn

diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 97f843f8133c4..a8318812dcdc3 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -18,6 +18,7 @@ import("//build/config/win/manifest.gni")
 import("//build/private_code_test/private_code_test.gni")
 import("//build/toolchain/toolchain.gni")
 import("//chrome/browser/buildflags.gni")
+import("//chrome/browser/sparkle_buildflags.gni")
 import("//chrome/chrome_paks.gni")
 import("//chrome/common/features.gni")
 import("//chrome/process_version_rc_template.gni")
@@ -1218,6 +1219,10 @@ if (is_win) {
       bundle_deps += [ ":preinstalled_apps" ]
     }
 
+    if (enable_sparkle) {
+      bundle_deps += [ "//third_party/sparkle:sparkle" ]
+    }
+
     configs += [ ":chrome_dll_symbol_order" ]
     if (!is_component_build && !using_sanitizer) {
       configs += [ ":chrome_dll_symbol_exports" ]
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index ad39862fdd9a5..8cadfe3c6e7fb 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -12,6 +12,7 @@ import("//build/config/features.gni")
 import("//build/config/python.gni")
 import("//build/config/ui.gni")
 import("//chrome/browser/buildflags.gni")
+import("//chrome/browser/sparkle_buildflags.gni")
 import("//chrome/browser/downgrade/buildflags.gni")
 import("//chrome/browser/request_header_integrity/buildflags.gni")
 import("//chrome/common/features.gni")
@@ -119,6 +120,11 @@ buildflag_header("buildflags") {
   }
 }
 
+buildflag_header("sparkle_buildflags") {
+  header = "sparkle_buildflags.h"
+  flags = [ "ENABLE_SPARKLE=$enable_sparkle" ]
+}
+
 source_set("browser_process") {
   sources = [
     "browser_process.cc",
@@ -6557,6 +6563,20 @@ static_library("browser") {
     ]
   }
 
+  if (is_mac && enable_sparkle) {
+    sources += [
+      "mac/sparkle_glue.h",
+      "mac/sparkle_glue.mm",
+      "mac/su_updater.h",
+    ]
+
+    # Add dependency on sparkle buildflags and framework
+    deps += [
+      ":sparkle_buildflags",
+      "//third_party/sparkle:sparkle_framework",
+    ]
+  }
+
   if (is_android || is_mac || is_win || is_chromeos) {
     sources += [
       "device_reauth/chrome_device_authenticator_factory.cc",
diff --git a/chrome/browser/mac/chrome_browser_main_extra_parts_mac.h b/chrome/browser/mac/chrome_browser_main_extra_parts_mac.h
index 95726e7765367..da1f407aff2b3 100644
--- a/chrome/browser/mac/chrome_browser_main_extra_parts_mac.h
+++ b/chrome/browser/mac/chrome_browser_main_extra_parts_mac.h
@@ -24,6 +24,7 @@ class ChromeBrowserMainExtraPartsMac : public ChromeBrowserMainExtraParts {
 
   // ChromeBrowserMainExtraParts:
   void PreEarlyInitialization() override;
+  void PreCreateMainMessageLoop() override;
 
  private:
   std::unique_ptr<display::ScopedNativeScreen> screen_;
diff --git a/chrome/browser/mac/chrome_browser_main_extra_parts_mac.mm b/chrome/browser/mac/chrome_browser_main_extra_parts_mac.mm
index 6bb5ccb823895..f839a26a405d7 100644
--- a/chrome/browser/mac/chrome_browser_main_extra_parts_mac.mm
+++ b/chrome/browser/mac/chrome_browser_main_extra_parts_mac.mm
@@ -4,11 +4,30 @@
 
 #include "chrome/browser/mac/chrome_browser_main_extra_parts_mac.h"
 
+#include "chrome/browser/sparkle_buildflags.h"
 #include "ui/display/screen.h"
 
+#if BUILDFLAG(ENABLE_SPARKLE)
+#include "chrome/browser/mac/sparkle_glue.h"
+#endif
+
 ChromeBrowserMainExtraPartsMac::ChromeBrowserMainExtraPartsMac() = default;
 ChromeBrowserMainExtraPartsMac::~ChromeBrowserMainExtraPartsMac() = default;
 
 void ChromeBrowserMainExtraPartsMac::PreEarlyInitialization() {
   screen_ = std::make_unique<display::ScopedNativeScreen>();
 }
+
+void ChromeBrowserMainExtraPartsMac::PreCreateMainMessageLoop() {
+#if BUILDFLAG(ENABLE_SPARKLE)
+  // Initialize Sparkle updater if available
+  @try {
+    // Just get the shared instance - actual initialization is deferred
+    [SparkleGlue sharedSparkleGlue];
+  } @catch (NSException* exception) {
+    // Silently fail - updates just won't be available
+  } @catch (...) {
+    // Catch any C++ exceptions too
+  }
+#endif
+}
diff --git a/chrome/browser/mac/sparkle_glue.h b/chrome/browser/mac/sparkle_glue.h
new file mode 100644
index 0000000000000..c0b84c7873a18
--- /dev/null
+++ b/chrome/browser/mac/sparkle_glue.h
@@ -0,0 +1,51 @@
+// Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_MAC_SPARKLE_GLUE_H_
+#define CHROME_BROWSER_MAC_SPARKLE_GLUE_H_
+
+#import <Foundation/Foundation.h>
+
+// Forward declarations for C++ types in Objective-C context
+#ifdef __cplusplus
+#include "base/memory/weak_ptr.h"
+class SparkleVersionUpdater;
+#else
+typedef struct SparkleVersionUpdater SparkleVersionUpdater;
+#endif
+
+// Simple updater status for Sparkle integration
+enum UpdaterStatus {
+  kUpdaterStatusIdle = 0,
+  kUpdaterStatusChecking = 1,
+  kUpdaterStatusUpdateAvailable = 2,
+  kUpdaterStatusDownloading = 3,
+  kUpdaterStatusReadyToInstall = 4,
+  kUpdaterStatusError = 5,
+};
+
+@interface SparkleGlue : NSObject
+
++ (instancetype)sharedSparkleGlue;
+
+- (void)registerWithSparkle;
+- (void)checkForUpdates;
+- (BOOL)isUpdateCheckEnabled;
+
+// Set the version updater to receive status notifications
+#ifdef __cplusplus
+- (void)setVersionUpdater:(base::WeakPtr<SparkleVersionUpdater>)updater;
+#else
+- (void)setVersionUpdater:(void*)updater;
+#endif
+
+@end  // @interface SparkleGlue
+
+namespace sparkle_glue {
+
+bool SparkleEnabled();
+
+}  // namespace sparkle_glue
+
+#endif  // CHROME_BROWSER_MAC_SPARKLE_GLUE_H_
\ No newline at end of file
diff --git a/chrome/browser/mac/sparkle_glue.mm b/chrome/browser/mac/sparkle_glue.mm
new file mode 100644
index 0000000000000..8d02951dfd139
--- /dev/null
+++ b/chrome/browser/mac/sparkle_glue.mm
@@ -0,0 +1,409 @@
+// Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#import "chrome/browser/mac/sparkle_glue.h"
+
+#include <sys/mount.h>
+#include <sys/stat.h>
+
+#include "base/apple/bundle_locations.h"
+#include "base/apple/foundation_util.h"
+#include "base/apple/scoped_nsautorelease_pool.h"
+#include "base/command_line.h"
+#include "base/logging.h"
+#include "base/memory/weak_ptr.h"
+#include "base/strings/sys_string_conversions.h"
+#include "chrome/browser/mac/su_updater.h"
+#include "chrome/browser/ui/webui/help/sparkle_version_updater_mac.h"
+#include "chrome/common/chrome_switches.h"
+
+#if !defined(__has_feature) || !__has_feature(objc_arc)
+#error "This file requires ARC support."
+#endif
+
+namespace {
+
+// Check for updates every 3 hours
+constexpr NSTimeInterval kUpdateCheckIntervalInSec = 3 * 60 * 60;
+
+// Default update feed URL - replace with your actual update server
+NSString* GetUpdateFeedURL() {
+  @try {
+    // You can override with command line flag: --update-feed-url=<url>
+    auto* command_line = base::CommandLine::ForCurrentProcess();
+    if (command_line && command_line->HasSwitch("update-feed-url")) {
+      return base::SysUTF8ToNSString(
+          command_line->GetSwitchValueASCII("update-feed-url"));
+    }
+
+    // Default URL - replace with your actual update server
+    return @"https://nxtscape.github.io/nxtscape/appcast.xml";
+  } @catch (NSException* exception) {
+    return @"https://nxtscape.github.io/nxtscape/appcast.xml";
+  }
+}
+
+}  // namespace
+
+@implementation SparkleGlue {
+  SUUpdater* __strong _updater;
+  BOOL _registered;
+  NSString* __strong _appPath;
+  base::WeakPtr<SparkleVersionUpdater> _versionUpdater;  // Weak reference
+  BOOL _initializationAttempted;
+}
+
++ (instancetype)sharedSparkleGlue {
+  static SparkleGlue* shared = nil;
+  static dispatch_once_t onceToken;
+
+  dispatch_once(&onceToken, ^{
+    @try {
+      // Check if updates are disabled via command line
+      auto* command_line = base::CommandLine::ForCurrentProcess();
+      if (command_line && command_line->HasSwitch("disable-updates")) {
+        return;
+      }
+
+      shared = [[SparkleGlue alloc] init];
+    } @catch (NSException* exception) {
+      // Silently fail - updates just won't be available
+      shared = nil;
+    } @catch (...) {
+      // Catch any C++ exceptions too
+      shared = nil;
+    }
+  });
+
+  return shared;
+}
+
+- (instancetype)init {
+  @try {
+    if (self = [super init]) {
+      _registered = NO;
+      _initializationAttempted = NO;
+      _appPath = [base::apple::OuterBundle().bundlePath copy];
+      
+      // Defer framework loading to main queue with delay
+      // This ensures all Chrome subsystems are initialized
+      dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC),
+                     dispatch_get_main_queue(), ^{
+        [self attemptSparkleInitialization];
+      });
+      
+      return self;
+    }
+  } @catch (NSException* exception) {
+    return nil;
+  }
+  return nil;
+}
+
+- (void)attemptSparkleInitialization {
+  @try {
+    if (_initializationAttempted) {
+      return;
+    }
+    _initializationAttempted = YES;
+    
+    if ([self loadSparkleFramework]) {
+      VLOG(1) << "Sparkle framework loaded successfully";
+      [self registerWithSparkle];
+    }
+  } @catch (NSException* exception) {
+    // Silently fail
+  } @catch (...) {
+    // Catch C++ exceptions too
+  }
+}
+
+- (BOOL)loadSparkleFramework {
+  @try {
+    base::apple::ScopedNSAutoreleasePool pool;
+
+    // Check if running from read-only filesystem (e.g., DMG)
+    if ([self isOnReadOnlyFilesystem]) {
+      return NO;
+    }
+
+    // Try multiple paths for the Sparkle framework
+    NSArray<NSString*>* searchPaths = @[
+      // Path 1: Inside the Chromium Framework bundle (where it's actually bundled)
+      [[base::apple::FrameworkBundle() privateFrameworksPath]
+          stringByAppendingPathComponent:@"Sparkle.framework"],
+      
+      // Path 2: In the main app's Frameworks directory
+      [[base::apple::OuterBundle() privateFrameworksPath]
+          stringByAppendingPathComponent:@"Sparkle.framework"],
+      
+      // Path 3: Relative to the framework bundle
+      [[[base::apple::FrameworkBundle() bundlePath] 
+          stringByAppendingPathComponent:@"Frameworks"]
+          stringByAppendingPathComponent:@"Sparkle.framework"]
+    ];
+
+    NSBundle* sparkle_bundle = nil;
+    
+    for (NSString* path in searchPaths) {
+      if ([[NSFileManager defaultManager] fileExistsAtPath:path]) {
+        sparkle_bundle = [NSBundle bundleWithPath:path];
+        if (sparkle_bundle) {
+          break;
+        }
+      }
+    }
+
+    if (!sparkle_bundle) {
+      return NO;
+    }
+
+    // Check if already loaded
+    if (![sparkle_bundle isLoaded]) {
+      NSError* load_error = nil;
+      if (![sparkle_bundle loadAndReturnError:&load_error]) {
+        return NO;
+      }
+    }
+
+    // Get SUUpdater class and create shared instance
+    Class updater_class = [sparkle_bundle classNamed:@"SUUpdater"];
+    if (!updater_class) {
+      return NO;
+    }
+
+    // Use performSelector to avoid direct class dependencies
+    SEL sharedUpdaterSelector = NSSelectorFromString(@"sharedUpdater");
+    if (![updater_class respondsToSelector:sharedUpdaterSelector]) {
+      return NO;
+    }
+    
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
+    _updater = [updater_class performSelector:sharedUpdaterSelector];
+#pragma clang diagnostic pop
+    
+    if (!_updater) {
+      return NO;
+    }
+
+    return YES;
+    
+  } @catch (NSException* exception) {
+    return NO;
+  } @catch (...) {
+    return NO;
+  }
+}
+
+- (void)registerWithSparkle {
+  @try {
+    if (_registered || !_updater) {
+      return;
+    }
+
+    _registered = YES;
+
+    // Configure updater using performSelector to avoid direct dependencies
+    SEL setDelegateSelector = NSSelectorFromString(@"setDelegate:");
+    if ([_updater respondsToSelector:setDelegateSelector]) {
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
+      [_updater performSelector:setDelegateSelector withObject:self];
+#pragma clang diagnostic pop
+    }
+
+    // Set update check interval
+    SEL setIntervalSelector = NSSelectorFromString(@"setUpdateCheckInterval:");
+    if ([_updater respondsToSelector:setIntervalSelector]) {
+      NSMethodSignature* sig = [_updater methodSignatureForSelector:setIntervalSelector];
+      NSInvocation* invocation = [NSInvocation invocationWithMethodSignature:sig];
+      [invocation setTarget:_updater];
+      [invocation setSelector:setIntervalSelector];
+      NSTimeInterval interval = kUpdateCheckIntervalInSec;
+      [invocation setArgument:&interval atIndex:2];
+      [invocation invoke];
+    }
+
+    // Set automatic checks
+    SEL setAutoCheckSelector = NSSelectorFromString(@"setAutomaticallyChecksForUpdates:");
+    if ([_updater respondsToSelector:setAutoCheckSelector]) {
+      NSMethodSignature* sig = [_updater methodSignatureForSelector:setAutoCheckSelector];
+      NSInvocation* invocation = [NSInvocation invocationWithMethodSignature:sig];
+      [invocation setTarget:_updater];
+      [invocation setSelector:setAutoCheckSelector];
+      BOOL value = YES;
+      [invocation setArgument:&value atIndex:2];
+      [invocation invoke];
+    }
+
+    // Set automatic downloads
+    SEL setAutoDownloadSelector = NSSelectorFromString(@"setAutomaticallyDownloadsUpdates:");
+    if ([_updater respondsToSelector:setAutoDownloadSelector]) {
+      NSMethodSignature* sig = [_updater methodSignatureForSelector:setAutoDownloadSelector];
+      NSInvocation* invocation = [NSInvocation invocationWithMethodSignature:sig];
+      [invocation setTarget:_updater];
+      [invocation setSelector:setAutoDownloadSelector];
+      BOOL value = YES;
+      [invocation setArgument:&value atIndex:2];
+      [invocation invoke];
+    }
+
+    // Set feed URL
+    SEL setFeedURLSelector = NSSelectorFromString(@"setFeedURL:");
+    if ([_updater respondsToSelector:setFeedURLSelector]) {
+      NSString* feedURLString = GetUpdateFeedURL();
+      if (feedURLString) {
+        NSURL* feedURL = [NSURL URLWithString:feedURLString];
+        if (feedURL) {
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
+          [_updater performSelector:setFeedURLSelector withObject:feedURL];
+#pragma clang diagnostic pop
+        }
+      }
+    }
+
+  } @catch (NSException* exception) {
+    // Silently fail
+    _registered = NO;
+  } @catch (...) {
+    // Catch C++ exceptions too
+    _registered = NO;
+  }
+}
+
+- (void)checkForUpdates {
+  @try {
+    if (!_registered || !_updater) {
+      return;
+    }
+
+    SEL checkSelector = NSSelectorFromString(@"checkForUpdatesInBackground");
+    if ([_updater respondsToSelector:checkSelector]) {
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
+      [_updater performSelector:checkSelector];
+#pragma clang diagnostic pop
+    }
+  } @catch (NSException* exception) {
+    // Silently fail
+  }
+}
+
+- (BOOL)isUpdateCheckEnabled {
+  return _registered && _updater != nil;
+}
+
+- (BOOL)isOnReadOnlyFilesystem {
+  @try {
+    const char* appPathC = _appPath.fileSystemRepresentation;
+    struct statfs statfsBuf;
+
+    if (statfs(appPathC, &statfsBuf) != 0) {
+      return NO;
+    }
+
+    return (statfsBuf.f_flags & MNT_RDONLY) != 0;
+  } @catch (NSException* exception) {
+    return NO;
+  }
+}
+
+- (void)setVersionUpdater:(base::WeakPtr<SparkleVersionUpdater>)updater {
+  @try {
+    _versionUpdater = updater;
+  } @catch (NSException* exception) {
+    // Ignore
+  }
+}
+
+#pragma mark - SUUpdaterDelegate
+
+- (NSString*)feedURLStringForUpdater:(SUUpdater*)updater {
+  @try {
+    return GetUpdateFeedURL();
+  } @catch (NSException* exception) {
+    return @"https://nxtscape.github.io/nxtscape/appcast.xml";
+  }
+}
+
+- (void)updater:(SUUpdater*)updater didFinishLoadingAppcast:(SUAppcast*)appcast {
+  @try {
+    // Notify version updater that we're still checking
+    if (auto* versionUpdater = _versionUpdater.get()) {
+      versionUpdater->OnSparkleStatusChange(kSparkleStatusChecking);
+    }
+  } @catch (...) {
+    // Ignore all exceptions
+  }
+}
+
+- (void)updater:(SUUpdater*)updater didFindValidUpdate:(SUAppcastItem*)item {
+  @try {
+    VLOG(1) << "Sparkle: Update available";
+    if (auto* versionUpdater = _versionUpdater.get()) {
+      versionUpdater->OnSparkleStatusChange(kSparkleStatusUpdateFound);
+    }
+  } @catch (...) {
+    // Ignore all exceptions
+  }
+}
+
+- (void)updaterDidNotFindUpdate:(SUUpdater*)updater {
+  @try {
+    if (auto* versionUpdater = _versionUpdater.get()) {
+      versionUpdater->OnSparkleStatusChange(kSparkleStatusNoUpdate);
+    }
+  } @catch (...) {
+    // Ignore all exceptions
+  }
+}
+
+- (void)updater:(SUUpdater*)updater willInstallUpdate:(SUAppcastItem*)item {
+  @try {
+    if (auto* versionUpdater = _versionUpdater.get()) {
+      versionUpdater->OnSparkleStatusChange(kSparkleStatusReadyToInstall);
+    }
+  } @catch (...) {
+    // Ignore all exceptions
+  }
+}
+
+- (void)updater:(SUUpdater*)updater didAbortWithError:(NSError*)error {
+  @try {
+    // Check if this is actually an error or just "no update needed"
+    NSString* errorDesc = [error localizedDescription];
+    if ([errorDesc containsString:@"up to date"] || 
+        [errorDesc containsString:@"You're up to date"]) {
+      // This is not really an error, it means no update is needed
+      if (auto* versionUpdater = _versionUpdater.get()) {
+        versionUpdater->OnSparkleStatusChange(kSparkleStatusNoUpdate);
+      }
+    } else {
+      // This is a real error
+      VLOG(1) << "Sparkle update error: " << base::SysNSStringToUTF8(errorDesc);
+      if (auto* versionUpdater = _versionUpdater.get()) {
+        versionUpdater->OnSparkleStatusChange(kSparkleStatusError, 
+                                               base::SysNSStringToUTF8(errorDesc));
+      }
+    }
+  } @catch (...) {
+    // Ignore all exceptions
+  }
+}
+
+@end
+
+namespace sparkle_glue {
+
+bool SparkleEnabled() {
+  @try {
+    return [SparkleGlue sharedSparkleGlue] != nil;
+  } @catch (...) {
+    return false;
+  }
+}
+
+}  // namespace sparkle_glue
\ No newline at end of file
diff --git a/chrome/browser/mac/su_updater.h b/chrome/browser/mac/su_updater.h
new file mode 100644
index 0000000000000..53947090d7760
--- /dev/null
+++ b/chrome/browser/mac/su_updater.h
@@ -0,0 +1,38 @@
+// Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_MAC_SU_UPDATER_H_
+#define CHROME_BROWSER_MAC_SU_UPDATER_H_
+
+#import <Foundation/Foundation.h>
+
+// Forward declarations for Sparkle framework classes
+@class SUAppcast;
+@class SUAppcastItem;
+
+@interface SUUpdater : NSObject
+
++ (SUUpdater*)sharedUpdater;
+
+- (void)setDelegate:(id)delegate;
+- (void)setAutomaticallyChecksForUpdates:(BOOL)enable;
+- (void)setAutomaticallyDownloadsUpdates:(BOOL)enable;
+- (void)setUpdateCheckInterval:(NSTimeInterval)interval;
+- (void)checkForUpdatesInBackground;
+- (void)checkForUpdates:(id)sender;
+
+@property BOOL automaticallyDownloadsUpdates;
+
+@end
+
+// SUUpdaterDelegate protocol (partial)
+@protocol SUUpdaterDelegate <NSObject>
+@optional
+- (NSString*)feedURLStringForUpdater:(SUUpdater*)updater;
+- (void)updater:(SUUpdater*)updater didFinishLoadingAppcast:(SUAppcast*)appcast;
+- (void)updater:(SUUpdater*)updater didFindValidUpdate:(SUAppcastItem*)item;
+- (void)updaterDidNotFindUpdate:(SUUpdater*)updater;
+@end
+
+#endif  // CHROME_BROWSER_MAC_SU_UPDATER_H_
\ No newline at end of file
diff --git a/chrome/browser/sparkle_buildflags.gni b/chrome/browser/sparkle_buildflags.gni
new file mode 100644
index 0000000000000..984f9ab75b1fa
--- /dev/null
+++ b/chrome/browser/sparkle_buildflags.gni
@@ -0,0 +1,21 @@
+ # Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+# Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/features.gni")
+
+declare_args() {
+  # Enable Sparkle updater for macOS builds
+  # enable_sparkle = is_mac && !is_component_build && is_official_build
+  enable_sparkle = is_mac
+
+  # Path to Sparkle framework
+  sparkle_framework_path = "//third_party/sparkle/Sparkle.framework"
+
+  # Build Sparkle from source (if false, use prebuilt framework)
+  build_sparkle = false
+}
\ No newline at end of file
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index 93096ad92c1a3..5accc0ef01f89 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -3435,6 +3435,8 @@ static_library("ui") {
       "views/frame/native_browser_frame_factory_mac.mm",
       "views/tab_contents/chrome_web_contents_view_delegate_views_mac.h",
       "views/tab_contents/chrome_web_contents_view_delegate_views_mac.mm",
+      "webui/help/sparkle_version_updater_mac.h",
+      "webui/help/sparkle_version_updater_mac.mm",
       "webui/help/version_updater_mac.mm",
       "webui/settings/mac_system_settings_handler.cc",
       "webui/settings/mac_system_settings_handler.h",
@@ -3453,6 +3455,7 @@ static_library("ui") {
     allow_circular_includes_from += [ "//chrome/browser/apps/app_shim" ]
 
     deps += [
+      "//chrome/browser:sparkle_buildflags",
       "//chrome/browser/apps/app_shim",
       "//chrome/browser/enterprise/connectors/device_trust/key_management/core/mac",
       "//chrome/browser/updater:browser_updater_client",
diff --git a/chrome/browser/ui/webui/help/sparkle_version_updater_mac.h b/chrome/browser/ui/webui/help/sparkle_version_updater_mac.h
new file mode 100644
index 0000000000000..91cf1bd365df6
--- /dev/null
+++ b/chrome/browser/ui/webui/help/sparkle_version_updater_mac.h
@@ -0,0 +1,55 @@
+// Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_WEBUI_HELP_SPARKLE_VERSION_UPDATER_MAC_H_
+#define CHROME_BROWSER_UI_WEBUI_HELP_SPARKLE_VERSION_UPDATER_MAC_H_
+
+#include "chrome/browser/ui/webui/help/version_updater.h"
+#include "chrome/browser/mac/sparkle_glue.h"
+#include "base/memory/weak_ptr.h"
+
+#if defined(__OBJC__)
+@class NSNotification;
+#else
+class NSNotification;
+#endif
+
+// Enum for Sparkle update status
+enum SparkleUpdateStatus {
+  kSparkleStatusChecking,
+  kSparkleStatusNoUpdate,
+  kSparkleStatusUpdateFound,
+  kSparkleStatusDownloading,
+  kSparkleStatusReadyToInstall,
+  kSparkleStatusError
+};
+
+// SparkleVersionUpdater is the VersionUpdater implementation for macOS
+// that uses the Sparkle framework for updates.
+class SparkleVersionUpdater : public VersionUpdater {
+ public:
+  SparkleVersionUpdater();
+  SparkleVersionUpdater(const SparkleVersionUpdater&) = delete;
+  SparkleVersionUpdater& operator=(const SparkleVersionUpdater&) = delete;
+  ~SparkleVersionUpdater() override;
+
+  // VersionUpdater implementation.
+  void CheckForUpdate(StatusCallback status_callback,
+                      PromoteCallback promote_callback) override;
+  void PromoteUpdater() override;
+
+  // Called by SparkleGlue to notify of status changes
+  void OnSparkleStatusChange(SparkleUpdateStatus status, const std::string& error_message = "");
+
+  // Get a weak pointer to this object
+  base::WeakPtr<SparkleVersionUpdater> GetWeakPtr();
+
+ private:
+  void UpdateStatus(SparkleUpdateStatus status, const std::string& error_message = "");
+
+  StatusCallback status_callback_;
+  base::WeakPtrFactory<SparkleVersionUpdater> weak_ptr_factory_{this};
+};
+
+#endif  // CHROME_BROWSER_UI_WEBUI_HELP_SPARKLE_VERSION_UPDATER_MAC_H_
\ No newline at end of file
diff --git a/chrome/browser/ui/webui/help/sparkle_version_updater_mac.mm b/chrome/browser/ui/webui/help/sparkle_version_updater_mac.mm
new file mode 100644
index 0000000000000..b0222ef2f4427
--- /dev/null
+++ b/chrome/browser/ui/webui/help/sparkle_version_updater_mac.mm
@@ -0,0 +1,87 @@
+// Copyright 2024 Nxtscape Browser Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/webui/help/sparkle_version_updater_mac.h"
+
+#include "base/logging.h"
+#include "base/strings/utf_string_conversions.h"
+#include "chrome/browser/mac/sparkle_glue.h"
+#include "chrome/grit/generated_resources.h"
+#include "ui/base/l10n/l10n_util.h"
+
+SparkleVersionUpdater::SparkleVersionUpdater() = default;
+SparkleVersionUpdater::~SparkleVersionUpdater() = default;
+
+void SparkleVersionUpdater::CheckForUpdate(StatusCallback status_callback,
+                                          PromoteCallback promote_callback) {
+  status_callback_ = std::move(status_callback);
+
+  SparkleGlue* sparkle = [SparkleGlue sharedSparkleGlue];
+  if (!sparkle || ![sparkle isUpdateCheckEnabled]) {
+    VLOG(1) << "Sparkle updater not available or disabled";
+    UpdateStatus(kSparkleStatusError, "Sparkle updater not available");
+    return;
+  }
+
+  // Start checking for updates
+  UpdateStatus(kSparkleStatusChecking);
+
+  // Set this updater as the current one so SparkleGlue can notify us
+  [sparkle setVersionUpdater:GetWeakPtr()];
+
+  [sparkle checkForUpdates];
+}
+
+void SparkleVersionUpdater::PromoteUpdater() {
+  // Sparkle doesn't require promotion like Google's updater
+  // This is a no-op for Sparkle
+}
+
+void SparkleVersionUpdater::OnSparkleStatusChange(SparkleUpdateStatus status, const std::string& error_message) {
+  UpdateStatus(status, error_message);
+}
+
+base::WeakPtr<SparkleVersionUpdater> SparkleVersionUpdater::GetWeakPtr() {
+  return weak_ptr_factory_.GetWeakPtr();
+}
+
+void SparkleVersionUpdater::UpdateStatus(SparkleUpdateStatus status, const std::string& error_message) {
+  if (status_callback_.is_null()) {
+    return;
+  }
+
+  Status update_status = CHECKING;
+  std::u16string message;
+
+  switch (status) {
+    case kSparkleStatusChecking:
+      VLOG(1) << "Sparkle: Checking for updates";
+      update_status = CHECKING;
+      break;
+    case kSparkleStatusNoUpdate:
+      VLOG(1) << "Sparkle: No update available";
+      update_status = UPDATED;
+      break;
+    case kSparkleStatusUpdateFound:
+      VLOG(1) << "Sparkle: Update found";
+      update_status = UPDATING;
+      break;
+    case kSparkleStatusDownloading:
+      VLOG(1) << "Sparkle: Downloading update";
+      update_status = UPDATING;
+      break;
+    case kSparkleStatusReadyToInstall:
+      VLOG(1) << "Sparkle: Ready to install update";
+      update_status = NEARLY_UPDATED;
+      break;
+    case kSparkleStatusError:
+      VLOG(1) << "Sparkle update error: " << error_message;
+      update_status = FAILED;
+      message = base::UTF8ToUTF16(error_message);
+      break;
+  }
+
+  status_callback_.Run(update_status, 0, false, false, std::string(), 0,
+                       message);
+}
\ No newline at end of file
diff --git a/chrome/browser/ui/webui/help/version_updater_mac.mm b/chrome/browser/ui/webui/help/version_updater_mac.mm
index 992157e28e8f5..b44a4c8b8d7df 100644
--- a/chrome/browser/ui/webui/help/version_updater_mac.mm
+++ b/chrome/browser/ui/webui/help/version_updater_mac.mm
@@ -6,6 +6,15 @@
 
 #import <Foundation/Foundation.h>
 
+// Include Sparkle updater if available
+#include "base/command_line.h"
+#include "chrome/browser/sparkle_buildflags.h"
+
+#if BUILDFLAG(ENABLE_SPARKLE)
+#include "chrome/browser/ui/webui/help/sparkle_version_updater_mac.h"
+#include "chrome/browser/mac/sparkle_glue.h"
+#endif
+
 #include <algorithm>
 #include <memory>
 #include <string>
@@ -74,6 +83,8 @@ void UpdateStatus(VersionUpdater::StatusCallback status_callback,
                    : VersionUpdater::Status::UPDATED;
       break;
     case updater::UpdateService::UpdateState::State::kUpdateError:
+      // Log only errors
+      VLOG(1) << "Update error, code: " << update_state.error_code;
       switch (update_state.error_code) {
         case updater::GOOPDATE_E_APP_UPDATE_DISABLED_BY_POLICY:
           status = VersionUpdater::Status::DISABLED_BY_ADMIN;
@@ -143,12 +154,26 @@ class VersionUpdaterMac : public VersionUpdater {
             },
             base::BindRepeating(&UpdateStatus, status_callback)));
   }
-  void PromoteUpdater() override { SetupSystemUpdater(); }
+  void PromoteUpdater() override {
+    SetupSystemUpdater();
+  }
 };
 
 }  // namespace
 
 std::unique_ptr<VersionUpdater> VersionUpdater::Create(
     content::WebContents* /* web_contents */) {
+#if BUILDFLAG(ENABLE_SPARKLE)
+  // Use Sparkle updater if it's enabled
+  if (sparkle_glue::SparkleEnabled()) {
+    VLOG(0) << "Using Sparkle updater";
+    return base::WrapUnique(new SparkleVersionUpdater());
+  }
+  else {
+    VLOG(1) << "Sparkle updater not available, using default updater";
+  }
+#endif
+
+  // Otherwise use the default Chromium updater
   return base::WrapUnique(new VersionUpdaterMac());
 }
diff --git a/third_party/sparkle/BUILD.gn b/third_party/sparkle/BUILD.gn
new file mode 100644
index 0000000000000..5c09b44984519
--- /dev/null
+++ b/third_party/sparkle/BUILD.gn
@@ -0,0 +1,50 @@
+# Copyright 2024 The Chromium Authors
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/mac/mac_sdk.gni")
+
+assert(is_mac)
+
+# Bundle data for Sparkle.framework
+bundle_data("sparkle_framework_bundle_data") {
+  sources = [ "Sparkle.framework" ]
+  outputs = [ "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}" ]
+}
+
+# Main Sparkle framework target
+group("sparkle") {
+  public_deps = [ ":sparkle_framework_bundle_data" ]
+}
+
+# Configuration for including Sparkle headers
+config("sparkle_config") {
+  framework_dirs = [ "$root_out_dir" ]
+  
+  # Add the framework search path
+  ldflags = [
+    "-F",
+    rebase_path(".", root_build_dir),
+    "-framework",
+    "Sparkle",
+    "-weak_framework",
+    "Sparkle",
+  ]
+}
+
+# Target for apps that want to use Sparkle
+group("sparkle_framework") {
+  public_deps = [ ":sparkle" ]
+  
+  public_configs = [ ":sparkle_config" ]
+}
+
+# Resources that might be needed by Sparkle
+bundle_data("sparkle_resources") {
+  sources = [
+    "Sparkle.framework/Versions/B/Resources/Autoupdate.app",
+    "Sparkle.framework/Versions/B/Resources/Updater.app",
+  ]
+  
+  outputs = [ "{{bundle_contents_dir}}/Frameworks/Sparkle.framework/Resources/{{source_file_part}}" ]
+} 
\ No newline at end of file
-- 
2.49.0

